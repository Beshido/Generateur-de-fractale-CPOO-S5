/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fractale;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;

enum WindowFitMode { 
	MINFIT, 
	MAXFIT,
	FILL;
}

public class App {

	public String getGreeting() {
		return "Hello world.";
	}

	// Fonction donnee dans l'enonce 
	// f (z) = z^2 + c avec c = −0.7269 + 0.1889i

	public static Complex f0(Complex c) {
		return c.mul(c).add(new Complex(-0.7269, 0.1889));
	}

	public static void main(String[] args) throws IOException {
		main_(args);
	}

	/**
	 * Fonction de lancement du GUI (Graphic User Interface).
	 */
	private static void createAndShowGUI() {
		//Set up de la fenetre d'affichage. 
		JFrame frame = new JFrame("Fractale rendering");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		//Generation de la fractale et son affichage. 
		FractaleRenderConfig c = FractaleRenderConfig.createSimple(1001, -1, 1);
		ImagePanel imagePanel = new ImagePanel(c, JolieFonction.getJoliesFonctions().get(0), ColorScheme::colorScheme0);
		imagePanel.setPreferredSize(new Dimension(1001, 1001));
		frame.getContentPane().add(imagePanel, BorderLayout.CENTER);

		//Set up de la fenetre de controle. 
		JFrame frame2 = new JFrame("Fractale controls");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		JPanel leftPanel = new JPanel();
		leftPanel.setLayout(new GridLayout(0, 1));
		frame2.getContentPane().add(leftPanel, BorderLayout.WEST);

		//Selection du systeme de "transition" (la faeon dont on vas generer les bords de la 
		//fractale en dehors de l'ecran, lors d'un deplacement).
		JComboBox<ImagePanel.TransitionMode> trMode = new JComboBox<>(ImagePanel.TransitionMode.values());
		trMode.addActionListener(e ->  {
			System.out.println("selected : " + trMode.getSelectedItem());
			imagePanel.setTransitionMode((ImagePanel.TransitionMode)trMode.getSelectedItem());
		});
		trMode.setBorder(BorderFactory.createTitledBorder("transition interaction"));
		leftPanel.add(trMode);

		//Selection de la couleur du rendu de la fractale.
		JComboBox<ColorScheme> colorScheme = new JComboBox<>(ColorScheme.getAllSchemes().toArray(new ColorScheme[2]));
		colorScheme.addActionListener(e ->  {
			System.out.println("selected : " + colorScheme.getSelectedItem());
			imagePanel.setColorScheme((ColorScheme)colorScheme.getSelectedItem());
		});
		colorScheme.setBorder(BorderFactory.createTitledBorder("color scheme"));
		leftPanel.add(colorScheme);

		//Selection du mode de remplissage de la fenetre d'affichage avec l'image de la fractale. 
		JComboBox<WindowFitMode> squareRender = new JComboBox<>(WindowFitMode.values());		
		leftPanel.add(squareRender);
		squareRender.addActionListener(e -> {
			imagePanel.setWindowFitMode((WindowFitMode)squareRender.getSelectedItem());
		});
		squareRender.setBorder(BorderFactory.createTitledBorder("image fit mode"));
		squareRender.setSelectedItem(WindowFitMode.FILL);

		//Zone de texte permettant de rentrer sa fonction.
		JTextField function = new JTextField();
		function.setBorder(BorderFactory.createTitledBorder("texte fonction"));
		function.addKeyListener(new KeyListener() {

			@Override
			public void keyPressed(KeyEvent arg0) {
				updateFunction();
			}

			@Override
			public void keyReleased(KeyEvent arg0) {
				updateFunction();
			}

			@Override
			public void keyTyped(KeyEvent arg0) {
				updateFunction();
			}

			void updateFunction() {
				try {
					imagePanel.setFunction(new JolieFonction(function.getText()));
					function.setBackground(Color.WHITE);
				} catch (Exception e) {
					function.setBackground(Color.RED);
				}
			}

		});
		leftPanel.add(function);

		//Zone de texte permettant de fixer le nombre max d'iterations
				JTextField iterations = new JTextField();
				iterations.setBorder(BorderFactory.createTitledBorder("selection iterations"));
				iterations.setText(Integer.toString(imagePanel.config.maxIterations));
				iterations.addKeyListener(new KeyListener() {

					@Override
					public void keyPressed(KeyEvent arg0) {
						updateFunction();
					}

					@Override
					public void keyReleased(KeyEvent arg0) {
						updateFunction();
					}

					@Override
					public void keyTyped(KeyEvent arg0) {
						updateFunction();
					}

					void updateFunction() {
						try {
							imagePanel.setMaxIteration(Integer.parseInt(iterations.getText()));
							iterations.setBackground(Color.WHITE);
						} catch (Exception e) {
							iterations.setBackground(Color.RED);
						}
					}

				});
				leftPanel.add(iterations);

		// Possibilite d'utiliser un preset de fonctions enregistrees dans les "JoliesFonction".
		JComboBox<JolieFonction> joliesFonction = new JComboBox<>(JolieFonction.getJoliesFonctions().toArray(new JolieFonction[0]));
		joliesFonction.addActionListener(e ->  {
			JolieFonction f = (JolieFonction)joliesFonction.getSelectedItem();
			System.out.println("selected : " + f);
			imagePanel.setFunction(f);
			function.setText(f.getDefinition());
		});
		joliesFonction.setSelectedIndex(0);
		joliesFonction.setBorder(BorderFactory.createTitledBorder("fonction predefinie"));
		leftPanel.add(joliesFonction);

		//Selection de la puissance du zoom.
		JComboBox<Double> zoomSpeed = new JComboBox<>(new Double[] { 1.01, 1.03, 1.05, 1.07, 1.1, 1.2 });
		zoomSpeed.addActionListener(e ->  {
			imagePanel.zoomSpeed = (Double)zoomSpeed.getSelectedItem();
		});
		zoomSpeed.setBorder(BorderFactory.createTitledBorder("zoom speed"));
		zoomSpeed.setSelectedIndex(5);
		leftPanel.add(zoomSpeed);

		//Affichage de la fenetre 
		frame.pack();
		frame.setVisible(true);
		frame2.pack();
		frame2.setVisible(true);
	}


	public static void main_(String[] args) throws IOException {
		// A l'appel de fractale.jar, si des arguments sont donnes alors on genere un .png de la fractale
		// et un .txt contenant les differentes variables. 
		if (args.length > 0) {
			System.out.println("LA GROSSE IMAGE SUR DISQUE");
			if (args.length != 9) {
				System.out.println("usage : <texte fonction> <min real> <max real> <min im> <max im> <output width> <output height> <color scheme> <output file>"); 
			} else {
				System.out.println("LA GROSSE GENERATION SUR DISQUE");
				String fun          = args[0];
				double minReal      = Double.parseDouble(args[1]);
				double maxReal      = Double.parseDouble(args[2]);
				double minImg       = Double.parseDouble(args[3]);
				double maxImg       = Double.parseDouble(args[4]);
				int    outputWidth  = Integer.parseInt(args[5]);
				int    outputHeight = Integer.parseInt(args[6]);
				ColorScheme col     = ColorScheme.getAllSchemes().get(Integer.parseInt(args[7]));
				String fileName     = args[8];
				JolieFonction f = new JolieFonction(fun);
				
				//Creation de la config
				FractaleRenderConfig c = new FractaleRenderConfig.Builder()
						.outputWidth(outputWidth)
						.outputHeight(outputHeight)
						.realRange(minReal, maxReal)
						.imgRange(minImg, maxImg)
						.build();
				BufferedImage img = new FractaleRenderEngine(FractaleRenderEngine.executorServiceInstance)
						.generateFractaleImage(c,f, col.f);
				FractaleRenderEngine.executorServiceInstance.shutdown();
				Graphics2D g = img.createGraphics();
				g.setColor(Color.WHITE);
				FractaleRenderEngine.information(g, c, f);
				g.dispose();
				
				//Ecriture de l'image en .png
				ImageIO.write(img, "PNG", new File(fileName + ".png"));
				
				//Ecriture d'un .txt avec les parametres de la fractale.
				try (PrintStream ps = new PrintStream(fileName + ".txt")) {
					ps.println("fonction    : " + fun);
					ps.println("réel        : " + minReal + " " + maxReal);
					ps.println("imaginaire  : " + minImg + " " + maxImg);
					ps.println("taile       : " + outputWidth + "x" + outputHeight);
					ps.println("colorscheme : " + col.name);
					ps.flush();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
			}


			//Si fractale.jar est appelle sans arguments alors on lance le GUI.
		} else {
			javax.swing.SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					createAndShowGUI();
				}
			});
		}
	}
}
